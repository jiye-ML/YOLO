'''    解析配置文件参数'''import configparserclass Config():    def __init__(self):        pass    @staticmethod    def process_config_for_train(conf_file):        common_params = {}        dataset_params = {}        net_params = {}        solver_params = {}        # configure_parser        config = configparser.ConfigParser()        config.read(conf_file)        # sections and options        for section in config.sections():            # construct common_params            if section == 'Common':                for option in config.options(section):                    common_params[option] = config.get(section, option)            # construct dataset_params            if section == 'DataSet':                for option in config.options(section):                    dataset_params[option] = config.get(section, option)            # construct net_params            if section == 'Net':                for option in config.options(section):                    net_params[option] = config.get(section, option)            # construct solver_params            if section == 'Solver':                for option in config.options(section):                    solver_params[option] = config.get(section, option)        return common_params, dataset_params, net_params, solver_params    @staticmethod    def process_config_for_predict(conf_file):        common_params = {}        net_params = {}        solver_params = {}        predict_params = {}        # configure_parser        config = configparser.ConfigParser()        config.read(conf_file)        # sections and options        for section in config.sections():            # construct common_params            if section == 'Common':                for option in config.options(section):                    common_params[option] = config.get(section, option)            # construct net_params            if section == 'Net':                for option in config.options(section):                    net_params[option] = config.get(section, option)            # construct solver_params            if section == 'Solver':                for option in config.options(section):                    solver_params[option] = config.get(section, option)            # construct predict            if section == 'Predict':                for option in config.options(section):                    predict_params[option] = config.get(section, option)        return common_params, net_params, solver_params, predict_params    pass